#ifndef __HTTP_H__
#define __HTTP_H__
#include "ssl.h"
#include <sys/types.h>
#include <stdbool.h>
#include <stdint.h>

typedef struct {
    uint8_t* buffer;            // Pointer to HTTP response header & body
    uint8_t* body;              // Start of the HTTP resp body (inside buffer)
    ssize_t content_length;      // Length of `data`
    //we are running into alot of signed/unsigned comparison warnings with this but its a bit late to change
} http_response;

/**
 * Similar to sendHttp, except an aesHandshake() is called first to initiate a
 * session with the server. The data sent across the wire is also encrypted with
 * an ephemeral AES key generated by the call to aesHandshake().
 *
 * Params:
 *  method      String of either "GET" or "POST" depending on which http method
 *              this request is to use
 *  url         The route to send the request to
 *  body        The body of the request. Ignored for GET requests
 *  bodylen     The length of the body. Ignored for GET requests
 *  resp        Pointer to a http_response struct that will be populated by the
 *              response the server gives to this request
 * Return:
 *  Fails       -1
 *  Succeeds    The number of bytes written to the ssl session opened
 *
 * If sending the request fails, returns -1.
 * If successful, returns the number of bytes written.
 */
ssize_t sendEncryptedHttp(const char* method, const char* url,
        uint8_t* body, ssize_t bodylen, http_response *resp);

/**
 * Wrapper around recvWrapper() that reads the response to an http request into
 * a http_response buffer. Will continue reading until the number of bytes
 * calculated by adding together the size of the received header (should be
 * grabbed in the first few reads) with the content_length defined in that header
 * is read, OR a timeout occurrs. In the event of a timeout, the function will
 * fail i.e. return -1.
 *
 * If this function succeeds, resp->buffer must be freed by the caller when
 * it is done being used.
 *
 * This function is called at the tail end of the sendHttp() function to finish
 * the http transaction.
 *
 * Params:
 *  ssl         The SSL* that the bytes are to be received over
 *  resp        A pointer to the http_response struct where the bytes are to
 *              be buffered
 * Return:
 *  Fail        -1
 *  Success     1
 */
ssize_t getResponse(SSL *ssl, http_response *resp);

#endif
